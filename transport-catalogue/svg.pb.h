// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_svg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_svg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_svg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_svg_2eproto;
namespace proto {
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class ColorArray;
struct ColorArrayDefaultTypeInternal;
extern ColorArrayDefaultTypeInternal _ColorArray_default_instance_;
class ColorString;
struct ColorStringDefaultTypeInternal;
extern ColorStringDefaultTypeInternal _ColorString_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Color* Arena::CreateMaybeMessage<::proto::Color>(Arena*);
template<> ::proto::ColorArray* Arena::CreateMaybeMessage<::proto::ColorArray>(Arena*);
template<> ::proto::ColorString* Arena::CreateMaybeMessage<::proto::ColorString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ColorString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ColorString) */ {
 public:
  inline ColorString() : ColorString(nullptr) {}
  ~ColorString() override;
  explicit PROTOBUF_CONSTEXPR ColorString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorString(const ColorString& from);
  ColorString(ColorString&& from) noexcept
    : ColorString() {
    *this = ::std::move(from);
  }

  inline ColorString& operator=(const ColorString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorString& operator=(ColorString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorString* internal_default_instance() {
    return reinterpret_cast<const ColorString*>(
               &_ColorString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ColorString& a, ColorString& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorString& from) {
    ColorString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ColorString";
  }
  protected:
  explicit ColorString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // string color = 1;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // @@protoc_insertion_point(class_scope:proto.ColorString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class ColorArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ColorArray) */ {
 public:
  inline ColorArray() : ColorArray(nullptr) {}
  ~ColorArray() override;
  explicit PROTOBUF_CONSTEXPR ColorArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorArray(const ColorArray& from);
  ColorArray(ColorArray&& from) noexcept
    : ColorArray() {
    *this = ::std::move(from);
  }

  inline ColorArray& operator=(const ColorArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorArray& operator=(ColorArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorArray* internal_default_instance() {
    return reinterpret_cast<const ColorArray*>(
               &_ColorArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColorArray& a, ColorArray& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorArray& from) {
    ColorArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ColorArray";
  }
  protected:
  explicit ColorArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // repeated float color = 1;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  float _internal_color(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_color() const;
  void _internal_add_color(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_color();
  public:
  float color(int index) const;
  void set_color(int index, float value);
  void add_color(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_color();

  // @@protoc_insertion_point(class_scope:proto.ColorArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorStringFieldNumber = 1,
    kColorArrayFieldNumber = 2,
  };
  // .proto.ColorString color_string = 1;
  bool has_color_string() const;
  private:
  bool _internal_has_color_string() const;
  public:
  void clear_color_string();
  const ::proto::ColorString& color_string() const;
  PROTOBUF_NODISCARD ::proto::ColorString* release_color_string();
  ::proto::ColorString* mutable_color_string();
  void set_allocated_color_string(::proto::ColorString* color_string);
  private:
  const ::proto::ColorString& _internal_color_string() const;
  ::proto::ColorString* _internal_mutable_color_string();
  public:
  void unsafe_arena_set_allocated_color_string(
      ::proto::ColorString* color_string);
  ::proto::ColorString* unsafe_arena_release_color_string();

  // .proto.ColorArray color_array = 2;
  bool has_color_array() const;
  private:
  bool _internal_has_color_array() const;
  public:
  void clear_color_array();
  const ::proto::ColorArray& color_array() const;
  PROTOBUF_NODISCARD ::proto::ColorArray* release_color_array();
  ::proto::ColorArray* mutable_color_array();
  void set_allocated_color_array(::proto::ColorArray* color_array);
  private:
  const ::proto::ColorArray& _internal_color_array() const;
  ::proto::ColorArray* _internal_mutable_color_array();
  public:
  void unsafe_arena_set_allocated_color_array(
      ::proto::ColorArray* color_array);
  ::proto::ColorArray* unsafe_arena_release_color_array();

  // @@protoc_insertion_point(class_scope:proto.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ColorString* color_string_;
    ::proto::ColorArray* color_array_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ColorString

// string color = 1;
inline void ColorString::clear_color() {
  _impl_.color_.ClearToEmpty();
}
inline const std::string& ColorString::color() const {
  // @@protoc_insertion_point(field_get:proto.ColorString.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorString::set_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ColorString.color)
}
inline std::string* ColorString::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.ColorString.color)
  return _s;
}
inline const std::string& ColorString::_internal_color() const {
  return _impl_.color_.Get();
}
inline void ColorString::_internal_set_color(const std::string& value) {
  
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorString::_internal_mutable_color() {
  
  return _impl_.color_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorString::release_color() {
  // @@protoc_insertion_point(field_release:proto.ColorString.color)
  return _impl_.color_.Release();
}
inline void ColorString::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  _impl_.color_.SetAllocated(color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ColorString.color)
}

// -------------------------------------------------------------------

// ColorArray

// repeated float color = 1;
inline int ColorArray::_internal_color_size() const {
  return _impl_.color_.size();
}
inline int ColorArray::color_size() const {
  return _internal_color_size();
}
inline void ColorArray::clear_color() {
  _impl_.color_.Clear();
}
inline float ColorArray::_internal_color(int index) const {
  return _impl_.color_.Get(index);
}
inline float ColorArray::color(int index) const {
  // @@protoc_insertion_point(field_get:proto.ColorArray.color)
  return _internal_color(index);
}
inline void ColorArray::set_color(int index, float value) {
  _impl_.color_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ColorArray.color)
}
inline void ColorArray::_internal_add_color(float value) {
  _impl_.color_.Add(value);
}
inline void ColorArray::add_color(float value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:proto.ColorArray.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorArray::_internal_color() const {
  return _impl_.color_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ColorArray::color() const {
  // @@protoc_insertion_point(field_list:proto.ColorArray.color)
  return _internal_color();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorArray::_internal_mutable_color() {
  return &_impl_.color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ColorArray::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:proto.ColorArray.color)
  return _internal_mutable_color();
}

// -------------------------------------------------------------------

// Color

// .proto.ColorString color_string = 1;
inline bool Color::_internal_has_color_string() const {
  return this != internal_default_instance() && _impl_.color_string_ != nullptr;
}
inline bool Color::has_color_string() const {
  return _internal_has_color_string();
}
inline void Color::clear_color_string() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_string_ != nullptr) {
    delete _impl_.color_string_;
  }
  _impl_.color_string_ = nullptr;
}
inline const ::proto::ColorString& Color::_internal_color_string() const {
  const ::proto::ColorString* p = _impl_.color_string_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ColorString&>(
      ::proto::_ColorString_default_instance_);
}
inline const ::proto::ColorString& Color::color_string() const {
  // @@protoc_insertion_point(field_get:proto.Color.color_string)
  return _internal_color_string();
}
inline void Color::unsafe_arena_set_allocated_color_string(
    ::proto::ColorString* color_string) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_string_);
  }
  _impl_.color_string_ = color_string;
  if (color_string) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Color.color_string)
}
inline ::proto::ColorString* Color::release_color_string() {
  
  ::proto::ColorString* temp = _impl_.color_string_;
  _impl_.color_string_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ColorString* Color::unsafe_arena_release_color_string() {
  // @@protoc_insertion_point(field_release:proto.Color.color_string)
  
  ::proto::ColorString* temp = _impl_.color_string_;
  _impl_.color_string_ = nullptr;
  return temp;
}
inline ::proto::ColorString* Color::_internal_mutable_color_string() {
  
  if (_impl_.color_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ColorString>(GetArenaForAllocation());
    _impl_.color_string_ = p;
  }
  return _impl_.color_string_;
}
inline ::proto::ColorString* Color::mutable_color_string() {
  ::proto::ColorString* _msg = _internal_mutable_color_string();
  // @@protoc_insertion_point(field_mutable:proto.Color.color_string)
  return _msg;
}
inline void Color::set_allocated_color_string(::proto::ColorString* color_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_string_;
  }
  if (color_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color_string);
    if (message_arena != submessage_arena) {
      color_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_string, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_string_ = color_string;
  // @@protoc_insertion_point(field_set_allocated:proto.Color.color_string)
}

// .proto.ColorArray color_array = 2;
inline bool Color::_internal_has_color_array() const {
  return this != internal_default_instance() && _impl_.color_array_ != nullptr;
}
inline bool Color::has_color_array() const {
  return _internal_has_color_array();
}
inline void Color::clear_color_array() {
  if (GetArenaForAllocation() == nullptr && _impl_.color_array_ != nullptr) {
    delete _impl_.color_array_;
  }
  _impl_.color_array_ = nullptr;
}
inline const ::proto::ColorArray& Color::_internal_color_array() const {
  const ::proto::ColorArray* p = _impl_.color_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ColorArray&>(
      ::proto::_ColorArray_default_instance_);
}
inline const ::proto::ColorArray& Color::color_array() const {
  // @@protoc_insertion_point(field_get:proto.Color.color_array)
  return _internal_color_array();
}
inline void Color::unsafe_arena_set_allocated_color_array(
    ::proto::ColorArray* color_array) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.color_array_);
  }
  _impl_.color_array_ = color_array;
  if (color_array) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Color.color_array)
}
inline ::proto::ColorArray* Color::release_color_array() {
  
  ::proto::ColorArray* temp = _impl_.color_array_;
  _impl_.color_array_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ColorArray* Color::unsafe_arena_release_color_array() {
  // @@protoc_insertion_point(field_release:proto.Color.color_array)
  
  ::proto::ColorArray* temp = _impl_.color_array_;
  _impl_.color_array_ = nullptr;
  return temp;
}
inline ::proto::ColorArray* Color::_internal_mutable_color_array() {
  
  if (_impl_.color_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ColorArray>(GetArenaForAllocation());
    _impl_.color_array_ = p;
  }
  return _impl_.color_array_;
}
inline ::proto::ColorArray* Color::mutable_color_array() {
  ::proto::ColorArray* _msg = _internal_mutable_color_array();
  // @@protoc_insertion_point(field_mutable:proto.Color.color_array)
  return _msg;
}
inline void Color::set_allocated_color_array(::proto::ColorArray* color_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.color_array_;
  }
  if (color_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(color_array);
    if (message_arena != submessage_arena) {
      color_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_array, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.color_array_ = color_array;
  // @@protoc_insertion_point(field_set_allocated:proto.Color.color_array)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
