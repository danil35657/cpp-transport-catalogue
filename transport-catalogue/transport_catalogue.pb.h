// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace proto {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Bus* Arena::CreateMaybeMessage<::proto::Bus>(Arena*);
template<> ::proto::Distance* Arena::CreateMaybeMessage<::proto::Distance>(Arena*);
template<> ::proto::Stop* Arena::CreateMaybeMessage<::proto::Stop>(Arena*);
template<> ::proto::TransportCatalogue* Arena::CreateMaybeMessage<::proto::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFieldNumber = 2,
    kNameFieldNumber = 1,
    kIsRoundtripFieldNumber = 3,
  };
  // repeated uint32 stop = 2;
  int stop_size() const;
  private:
  int _internal_stop_size() const;
  public:
  void clear_stop();
  private:
  uint32_t _internal_stop(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stop() const;
  void _internal_add_stop(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stop();
  public:
  uint32_t stop(int index) const;
  void set_stop(int index, uint32_t value);
  void add_stop(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stop();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_roundtrip = 3;
  void clear_is_roundtrip();
  bool is_roundtrip() const;
  void set_is_roundtrip(bool value);
  private:
  bool _internal_is_roundtrip() const;
  void _internal_set_is_roundtrip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stop_;
    mutable std::atomic<int> _stop_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_roundtrip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  ~Distance() override;
  explicit PROTOBUF_CONSTEXPR Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Distance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Distance& from) {
    Distance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFromFieldNumber = 1,
    kStopToFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // uint32 stop_from = 1;
  void clear_stop_from();
  uint32_t stop_from() const;
  void set_stop_from(uint32_t value);
  private:
  uint32_t _internal_stop_from() const;
  void _internal_set_stop_from(uint32_t value);
  public:

  // uint32 stop_to = 2;
  void clear_stop_to();
  uint32_t stop_to() const;
  void set_stop_to(uint32_t value);
  private:
  uint32_t _internal_stop_to() const;
  void _internal_set_stop_to(uint32_t value);
  public:

  // double length = 3;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t stop_from_;
    uint32_t stop_to_;
    double length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusFieldNumber = 1,
    kStopFieldNumber = 2,
    kDistanceFieldNumber = 3,
    kMapSettingsFieldNumber = 4,
    kGraphFieldNumber = 5,
  };
  // repeated .proto.Bus bus = 1;
  int bus_size() const;
  private:
  int _internal_bus_size() const;
  public:
  void clear_bus();
  ::proto::Bus* mutable_bus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >*
      mutable_bus();
  private:
  const ::proto::Bus& _internal_bus(int index) const;
  ::proto::Bus* _internal_add_bus();
  public:
  const ::proto::Bus& bus(int index) const;
  ::proto::Bus* add_bus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >&
      bus() const;

  // repeated .proto.Stop stop = 2;
  int stop_size() const;
  private:
  int _internal_stop_size() const;
  public:
  void clear_stop();
  ::proto::Stop* mutable_stop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
      mutable_stop();
  private:
  const ::proto::Stop& _internal_stop(int index) const;
  ::proto::Stop* _internal_add_stop();
  public:
  const ::proto::Stop& stop(int index) const;
  ::proto::Stop* add_stop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
      stop() const;

  // repeated .proto.Distance distance = 3;
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  ::proto::Distance* mutable_distance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >*
      mutable_distance();
  private:
  const ::proto::Distance& _internal_distance(int index) const;
  ::proto::Distance* _internal_add_distance();
  public:
  const ::proto::Distance& distance(int index) const;
  ::proto::Distance* add_distance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >&
      distance() const;

  // .proto.MapRendererSettings map_settings = 4;
  bool has_map_settings() const;
  private:
  bool _internal_has_map_settings() const;
  public:
  void clear_map_settings();
  const ::proto::MapRendererSettings& map_settings() const;
  PROTOBUF_NODISCARD ::proto::MapRendererSettings* release_map_settings();
  ::proto::MapRendererSettings* mutable_map_settings();
  void set_allocated_map_settings(::proto::MapRendererSettings* map_settings);
  private:
  const ::proto::MapRendererSettings& _internal_map_settings() const;
  ::proto::MapRendererSettings* _internal_mutable_map_settings();
  public:
  void unsafe_arena_set_allocated_map_settings(
      ::proto::MapRendererSettings* map_settings);
  ::proto::MapRendererSettings* unsafe_arena_release_map_settings();

  // .proto.Graph graph = 5;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::proto::Graph& graph() const;
  PROTOBUF_NODISCARD ::proto::Graph* release_graph();
  ::proto::Graph* mutable_graph();
  void set_allocated_graph(::proto::Graph* graph);
  private:
  const ::proto::Graph& _internal_graph() const;
  ::proto::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::proto::Graph* graph);
  ::proto::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:proto.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus > bus_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop > stop_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance > distance_;
    ::proto::MapRendererSettings* map_settings_;
    ::proto::Graph* graph_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stop

// string name = 1;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:proto.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:proto.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Stop.name)
}

// double x = 2;
inline void Stop::clear_x() {
  _impl_.x_ = 0;
}
inline double Stop::_internal_x() const {
  return _impl_.x_;
}
inline double Stop::x() const {
  // @@protoc_insertion_point(field_get:proto.Stop.x)
  return _internal_x();
}
inline void Stop::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Stop::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Stop.x)
}

// double y = 3;
inline void Stop::clear_y() {
  _impl_.y_ = 0;
}
inline double Stop::_internal_y() const {
  return _impl_.y_;
}
inline double Stop::y() const {
  // @@protoc_insertion_point(field_get:proto.Stop.y)
  return _internal_y();
}
inline void Stop::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Stop::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Stop.y)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:proto.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:proto.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Bus.name)
}

// repeated uint32 stop = 2;
inline int Bus::_internal_stop_size() const {
  return _impl_.stop_.size();
}
inline int Bus::stop_size() const {
  return _internal_stop_size();
}
inline void Bus::clear_stop() {
  _impl_.stop_.Clear();
}
inline uint32_t Bus::_internal_stop(int index) const {
  return _impl_.stop_.Get(index);
}
inline uint32_t Bus::stop(int index) const {
  // @@protoc_insertion_point(field_get:proto.Bus.stop)
  return _internal_stop(index);
}
inline void Bus::set_stop(int index, uint32_t value) {
  _impl_.stop_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Bus.stop)
}
inline void Bus::_internal_add_stop(uint32_t value) {
  _impl_.stop_.Add(value);
}
inline void Bus::add_stop(uint32_t value) {
  _internal_add_stop(value);
  // @@protoc_insertion_point(field_add:proto.Bus.stop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_stop() const {
  return _impl_.stop_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::stop() const {
  // @@protoc_insertion_point(field_list:proto.Bus.stop)
  return _internal_stop();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_stop() {
  return &_impl_.stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_stop() {
  // @@protoc_insertion_point(field_mutable_list:proto.Bus.stop)
  return _internal_mutable_stop();
}

// bool is_roundtrip = 3;
inline void Bus::clear_is_roundtrip() {
  _impl_.is_roundtrip_ = false;
}
inline bool Bus::_internal_is_roundtrip() const {
  return _impl_.is_roundtrip_;
}
inline bool Bus::is_roundtrip() const {
  // @@protoc_insertion_point(field_get:proto.Bus.is_roundtrip)
  return _internal_is_roundtrip();
}
inline void Bus::_internal_set_is_roundtrip(bool value) {
  
  _impl_.is_roundtrip_ = value;
}
inline void Bus::set_is_roundtrip(bool value) {
  _internal_set_is_roundtrip(value);
  // @@protoc_insertion_point(field_set:proto.Bus.is_roundtrip)
}

// -------------------------------------------------------------------

// Distance

// uint32 stop_from = 1;
inline void Distance::clear_stop_from() {
  _impl_.stop_from_ = 0u;
}
inline uint32_t Distance::_internal_stop_from() const {
  return _impl_.stop_from_;
}
inline uint32_t Distance::stop_from() const {
  // @@protoc_insertion_point(field_get:proto.Distance.stop_from)
  return _internal_stop_from();
}
inline void Distance::_internal_set_stop_from(uint32_t value) {
  
  _impl_.stop_from_ = value;
}
inline void Distance::set_stop_from(uint32_t value) {
  _internal_set_stop_from(value);
  // @@protoc_insertion_point(field_set:proto.Distance.stop_from)
}

// uint32 stop_to = 2;
inline void Distance::clear_stop_to() {
  _impl_.stop_to_ = 0u;
}
inline uint32_t Distance::_internal_stop_to() const {
  return _impl_.stop_to_;
}
inline uint32_t Distance::stop_to() const {
  // @@protoc_insertion_point(field_get:proto.Distance.stop_to)
  return _internal_stop_to();
}
inline void Distance::_internal_set_stop_to(uint32_t value) {
  
  _impl_.stop_to_ = value;
}
inline void Distance::set_stop_to(uint32_t value) {
  _internal_set_stop_to(value);
  // @@protoc_insertion_point(field_set:proto.Distance.stop_to)
}

// double length = 3;
inline void Distance::clear_length() {
  _impl_.length_ = 0;
}
inline double Distance::_internal_length() const {
  return _impl_.length_;
}
inline double Distance::length() const {
  // @@protoc_insertion_point(field_get:proto.Distance.length)
  return _internal_length();
}
inline void Distance::_internal_set_length(double value) {
  
  _impl_.length_ = value;
}
inline void Distance::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:proto.Distance.length)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .proto.Bus bus = 1;
inline int TransportCatalogue::_internal_bus_size() const {
  return _impl_.bus_.size();
}
inline int TransportCatalogue::bus_size() const {
  return _internal_bus_size();
}
inline void TransportCatalogue::clear_bus() {
  _impl_.bus_.Clear();
}
inline ::proto::Bus* TransportCatalogue::mutable_bus(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.bus)
  return _impl_.bus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >*
TransportCatalogue::mutable_bus() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.bus)
  return &_impl_.bus_;
}
inline const ::proto::Bus& TransportCatalogue::_internal_bus(int index) const {
  return _impl_.bus_.Get(index);
}
inline const ::proto::Bus& TransportCatalogue::bus(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.bus)
  return _internal_bus(index);
}
inline ::proto::Bus* TransportCatalogue::_internal_add_bus() {
  return _impl_.bus_.Add();
}
inline ::proto::Bus* TransportCatalogue::add_bus() {
  ::proto::Bus* _add = _internal_add_bus();
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.bus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Bus >&
TransportCatalogue::bus() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.bus)
  return _impl_.bus_;
}

// repeated .proto.Stop stop = 2;
inline int TransportCatalogue::_internal_stop_size() const {
  return _impl_.stop_.size();
}
inline int TransportCatalogue::stop_size() const {
  return _internal_stop_size();
}
inline void TransportCatalogue::clear_stop() {
  _impl_.stop_.Clear();
}
inline ::proto::Stop* TransportCatalogue::mutable_stop(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.stop)
  return _impl_.stop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >*
TransportCatalogue::mutable_stop() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.stop)
  return &_impl_.stop_;
}
inline const ::proto::Stop& TransportCatalogue::_internal_stop(int index) const {
  return _impl_.stop_.Get(index);
}
inline const ::proto::Stop& TransportCatalogue::stop(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.stop)
  return _internal_stop(index);
}
inline ::proto::Stop* TransportCatalogue::_internal_add_stop() {
  return _impl_.stop_.Add();
}
inline ::proto::Stop* TransportCatalogue::add_stop() {
  ::proto::Stop* _add = _internal_add_stop();
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.stop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Stop >&
TransportCatalogue::stop() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.stop)
  return _impl_.stop_;
}

// repeated .proto.Distance distance = 3;
inline int TransportCatalogue::_internal_distance_size() const {
  return _impl_.distance_.size();
}
inline int TransportCatalogue::distance_size() const {
  return _internal_distance_size();
}
inline void TransportCatalogue::clear_distance() {
  _impl_.distance_.Clear();
}
inline ::proto::Distance* TransportCatalogue::mutable_distance(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.distance)
  return _impl_.distance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >*
TransportCatalogue::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransportCatalogue.distance)
  return &_impl_.distance_;
}
inline const ::proto::Distance& TransportCatalogue::_internal_distance(int index) const {
  return _impl_.distance_.Get(index);
}
inline const ::proto::Distance& TransportCatalogue::distance(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.distance)
  return _internal_distance(index);
}
inline ::proto::Distance* TransportCatalogue::_internal_add_distance() {
  return _impl_.distance_.Add();
}
inline ::proto::Distance* TransportCatalogue::add_distance() {
  ::proto::Distance* _add = _internal_add_distance();
  // @@protoc_insertion_point(field_add:proto.TransportCatalogue.distance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Distance >&
TransportCatalogue::distance() const {
  // @@protoc_insertion_point(field_list:proto.TransportCatalogue.distance)
  return _impl_.distance_;
}

// .proto.MapRendererSettings map_settings = 4;
inline bool TransportCatalogue::_internal_has_map_settings() const {
  return this != internal_default_instance() && _impl_.map_settings_ != nullptr;
}
inline bool TransportCatalogue::has_map_settings() const {
  return _internal_has_map_settings();
}
inline const ::proto::MapRendererSettings& TransportCatalogue::_internal_map_settings() const {
  const ::proto::MapRendererSettings* p = _impl_.map_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MapRendererSettings&>(
      ::proto::_MapRendererSettings_default_instance_);
}
inline const ::proto::MapRendererSettings& TransportCatalogue::map_settings() const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.map_settings)
  return _internal_map_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_map_settings(
    ::proto::MapRendererSettings* map_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_settings_);
  }
  _impl_.map_settings_ = map_settings;
  if (map_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportCatalogue.map_settings)
}
inline ::proto::MapRendererSettings* TransportCatalogue::release_map_settings() {
  
  ::proto::MapRendererSettings* temp = _impl_.map_settings_;
  _impl_.map_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MapRendererSettings* TransportCatalogue::unsafe_arena_release_map_settings() {
  // @@protoc_insertion_point(field_release:proto.TransportCatalogue.map_settings)
  
  ::proto::MapRendererSettings* temp = _impl_.map_settings_;
  _impl_.map_settings_ = nullptr;
  return temp;
}
inline ::proto::MapRendererSettings* TransportCatalogue::_internal_mutable_map_settings() {
  
  if (_impl_.map_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MapRendererSettings>(GetArenaForAllocation());
    _impl_.map_settings_ = p;
  }
  return _impl_.map_settings_;
}
inline ::proto::MapRendererSettings* TransportCatalogue::mutable_map_settings() {
  ::proto::MapRendererSettings* _msg = _internal_mutable_map_settings();
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.map_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_map_settings(::proto::MapRendererSettings* map_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_settings_);
  }
  if (map_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_settings));
    if (message_arena != submessage_arena) {
      map_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_settings_ = map_settings;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportCatalogue.map_settings)
}

// .proto.Graph graph = 5;
inline bool TransportCatalogue::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool TransportCatalogue::has_graph() const {
  return _internal_has_graph();
}
inline const ::proto::Graph& TransportCatalogue::_internal_graph() const {
  const ::proto::Graph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Graph&>(
      ::proto::_Graph_default_instance_);
}
inline const ::proto::Graph& TransportCatalogue::graph() const {
  // @@protoc_insertion_point(field_get:proto.TransportCatalogue.graph)
  return _internal_graph();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_graph(
    ::proto::Graph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TransportCatalogue.graph)
}
inline ::proto::Graph* TransportCatalogue::release_graph() {
  
  ::proto::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Graph* TransportCatalogue::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:proto.TransportCatalogue.graph)
  
  ::proto::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::proto::Graph* TransportCatalogue::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Graph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::proto::Graph* TransportCatalogue::mutable_graph() {
  ::proto::Graph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:proto.TransportCatalogue.graph)
  return _msg;
}
inline void TransportCatalogue::set_allocated_graph(::proto::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:proto.TransportCatalogue.graph)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
